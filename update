#!/bin/bash

ROOTDIR="/root"
UPDIR="/usr/local/etc"
LOGDIR="/home/pi-star/logs"
HOMEDIR="/home/pi-star"
LOGFILE="$LOGDIR/update_$(date +"%d-%m-%Y").txt"
TMPDIR="/tmp"
LLDIR="/usr/local"
UURL="https://freedmr.d06fth.de"

# Verzeichnisse für chmod definieren
CHDIR="$UPDIR $TMPDIR $HOMEDIR $LLDIR"

# Berechtigungen setzen
sudo chmod 775 -R "$UPDIR $TMPDIR $HOMEDIR $LLDIR"
sudo chmod 777 -R /root /usr/local/etc
sudo chown pi-star:pi-star -R "$UPDIR $TMPDIR $HOMEDIR $LLDIR"
sudo mkdir "$LOGDIR"

# Funktion für die Ausgabe des Headers mit Formatierung
print_header() {
    echo -e "\n\033[1;36m"
    echo "                                                                "
    echo " _____             ____  _____ _____   ____  _     _ _       _ "
    echo "|   __|___ ___ ___|    \|     | __  | |    \|_|___|_| |_ ___| |"
    echo "|   __|  _| -_| -_|  |  | | | |    -|_|  |  | | . | |  _| .'| |"
    echo "|__|  |_| |___|___|____/|_|_|_|__|__|_|____/|_|_  |_|_| |__,|_|"
    echo "                                              |___|            "
    echo -e "\033[0m"
    echo -e "\033[1;33m"
    echo -e "FreeDMR - WPSD Update Created by D06FTH"
    echo -e "\033[0m"
    echo -e "\033[1;31m"
    echo -e "\e[31mDas Update kann ein wenig länger dauern, maximal 3 Minuten je nach System!\e[0m"
    echo -e "\033[0m"
    sleep 5
}

# Log-Funktion
log() {
    echo "$(date +"%Y-%m-%d %H:%M:%S") $1" | sudo tee -a "$LOGFILE"
}

# Funktion zum Herunterladen und Ersetzen der Datei
download_and_replace() {
    local URL=$1
    local FILE=$2
    local TEMPFILE="$TMPDIR/$(basename "$FILE")"

    wget -O "$TEMPFILE" "$URL" >> "$LOGFILE" 2>&1
    if [ $? -ne 0 ]; then
        log "Fehler beim Download von $URL"
        return 1
    fi

    sudo mv "$TEMPFILE" "$FILE" >> "$LOGFILE" 2>&1
    if [ $? -ne 0 ]; then
        log "Fehler beim Ersetzen von $FILE"
        return 1
    fi

    log "Datei $FILE erfolgreich aktualisiert."
    return 0
}

# Funktion zum Prüfen und Aktualisieren der CSV-Datei
update_csv_file() {
    local URL="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/stripped.csv"
    local LOCAL_FILE="$UPDIR/user.csv"
    local TEMPFILE="$TMPDIR/$(basename "$LOCAL_FILE")"

    # Prüfen, ob die Datei aktualisiert werden muss
    if [ ! -f "$LOCAL_FILE" ]; then
        log "Datei $LOCAL_FILE existiert nicht. Starte Download von $URL."
        download_and_replace "$URL" "$LOCAL_FILE"
        return $?
    fi

    # Zeitstempel von Remote- und Lokaldatei vergleichen
    local REMOTE_TIMESTAMP=$(wget --spider --server-response "$URL" 2>&1 | grep "Last-Modified:" | sed 's/Last-Modified: //')
    if [ -z "$REMOTE_TIMESTAMP" ]; then
        log "Konnte Remote-Zeitstempel nicht abrufen. Führe trotzdem Download durch."
        download_and_replace "$URL" "$LOCAL_FILE"
        return $?
    fi

    local LOCAL_TIMESTAMP=$(date -r "$LOCAL_FILE" +"%Y-%m-%d %H:%M:%S")
    if [ "$REMOTE_TIMESTAMP" != "$LOCAL_TIMESTAMP" ]; then
        log "Datei $LOCAL_FILE ist veraltet. Starte Download von $URL."
        download_and_replace "$URL" "$LOCAL_FILE"
        return $?
    fi

    log "Datei $LOCAL_FILE ist aktuell. Kein Download erforderlich."
    return 0
}

# Funktion zum Aktualisieren oder Erstellen einer Datei von einer URL
update_or_create_file() {
    local FILE=$1
    local URL=$2
    local TEMPFILE="$TMPDIR/$(basename "$FILE")"

    log "Starte Download von $URL"
    wget -O "$TEMPFILE" "$URL" >> "$LOGFILE" 2>&1
    if [ $? -ne 0 ]; then
        log "Fehler beim Download von $URL"
        return 1
    fi

    if [ -f "$FILE" ]; then
        log "Datei $FILE existiert bereits. Überprüfe und aktualisiere Datei..."
        grep -Fvx -f "$FILE" "$TEMPFILE" | sudo tee -a "$FILE" > /dev/null
        log "Datei $FILE erfolgreich aktualisiert."
    else
        log "Datei $FILE existiert nicht. Erstelle neue Datei..."
        sudo mv "$TEMPFILE" "$FILE"
        log "Datei $FILE erfolgreich erstellt."
    fi

    sudo rm "$TEMPFILE"
}

# Funktion zum Anhängen einer Zeile an eine Datei, falls sie noch nicht existiert
append_line_if_not_exists() {
    local FILE=$1
    local LINE=$2

    if grep -Fxq "$LINE" "$FILE"; then
        log "Zeile '$LINE' bereits in $FILE vorhanden. Keine Aktion erforderlich."
    else
        log "Zeile '$LINE' nicht in $FILE vorhanden. Füge Zeile hinzu..."
        echo "$LINE" | sudo tee -a "$FILE"
        log "Zeile '$LINE' erfolgreich zu $FILE hinzugefügt."
    fi
}

# Funktion zum Konvertieren einer JSON-Datei in CSV
convert_json_to_csv() {
    local JSON_URL="https://github.com/FreeDMR-Digital-Network/HBJson-HostFiles/raw/main/local_subscriber_ids.json"
    local JSON_FILE="$UPDIR/local_subscriber_ids.json"
    local CSV_FILE="$UPDIR/user.csv"

    # JSON-Datei herunterladen
    echo "Lade JSON-Datei herunter..."
    curl -s -o "$JSON_FILE" "$JSON_URL"

    # Überprüfen, ob der Download erfolgreich war
    if [ $? -ne 0 ]; then
        log "Fehler beim Herunterladen der JSON-Datei von $JSON_URL"
        return 1
    fi

    # Überprüfen, ob die JSON-Datei leer ist oder nicht im erwarteten Format
    if ! [[ -s "$JSON_FILE" ]]; then
        log "Die heruntergeladene JSON-Datei ist leer oder ungültig: $JSON_FILE"
        return 1
    fi

    # Python installieren, falls nicht vorhanden
    sudo apt-get update >> "$LOGFILE" 2>&1
    sudo apt-get install -y python3 >> "$LOGFILE" 2>&1

    #writer.writerow(['id', 'callsign', 'fname', 'name', 'city', 'country', 'land'])  # Headerzeile
    # JSON in CSV umwandeln
    python3 << END
import json
import csv

json_file = '$JSON_FILE'
csv_file = '$CSV_FILE'

try:
    with open(json_file, 'r', encoding='utf-8') as f:
        data = json.load(f)
except json.JSONDecodeError as e:
    print(f"Fehler beim Laden der JSON-Datei: {e}")
    exit(1)

with open(csv_file, mode='w', newline='', encoding='utf-8') as file:
    writer = csv.writer(file)
    writer.writerow(['id', 'callsign', 'fname', 'city', 'country', 'land'])  # Headerzeile

    for entry in data:
        row = [
            entry.get('id', ''),
            entry.get('callsign', ''),
            entry.get('fname', ''),
            entry.get('name', ''),
            entry.get('city', ''),
            entry.get('country', ''),
            entry.get('land' '')
        ]
        writer.writerow(row)

print(f"CSV-Datei {csv_file} wurde erstellt.")
END

    if [ $? -ne 0 ]; then
        log "Fehler beim Konvertieren der JSON-Datei in CSV: $JSON_FILE"
        return 1
    fi

    log "JSON-Datei erfolgreich in CSV konvertiert."
}

# Hauptskript

# Log Start
print_header
log "Starte Update-Prozess"

# CSV-Datei von URL aktualisieren oder erstellen
update_csv_file

# Dateien von den URLs aktualisieren oder erstellen
declare -A files_and_urls=(
    ["$UPDIR/DMRIds.dat"]="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/DMRIds.dat"
    ["$ROOTDIR/DMR_Hosts.txt"]="https://raw.githubusercontent.com/Technox90/FreeDMR-Digital/main/DMR_Hosts.txt"
    ["$UPDIR/country.csv"]="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/country.csv"
    ["$UPDIR/TGList_BM.txt"]="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/TGList_BM.txt"
    ["$UPDIR/talkgroup_ids.json"]="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/talkgroup_ids.json"
    #["$UPDIR/groups.txt"]="https://raw.githubusercontent.com/FreeDMR-Digital-Network/MW0MWZ-HostFiles/main/groups.txt"
)

for FILE in "${!files_and_urls[@]}"; do
    update_or_create_file "$FILE" "${files_and_urls[$FILE]}"
    if [ $? -ne 0 ]; then
        log "Fehler bei der Aktualisierung von $FILE"
    fi
done

# Temporäre Dateien bereinigen
log "Bereinige temporäre Dateien"
sudo rm -r "$TMPDIR/systemd-private-*" >> "$LOGFILE" 2>&1

# Konvertieren der JSON-Datei in CSV
convert_json_to_csv

# Zeile zu APRSHosts.txt hinzufügen, falls nicht vorhanden
FILE2="$UPDIR/APRSHosts.txt"
LINE2="daprs.de:14580 ; DAPRS"
append_line_if_not_exists "$FILE2" "$LINE2"

# Zeile zu DMR_Hosts.txt und DMR_Hosts.txt im UPDIR hinzufügen, falls nicht vorhanden
FILE3="$ROOTDIR/DMR_Hosts.txt"
FILE33="$UPDIR/DMR_Hosts.txt"
LINE3="BM_FreeDMR.Digital 0000 freedmr.digital passw0rd 62031"
append_line_if_not_exists "$FILE3" "$LINE3"
append_line_if_not_exists "$FILE33" "$LINE3"

# Log Ende
log "Update-Prozess abgeschlossen"
sudo find /usr/local/bin -type f -exec sed -i 's/Powered by WPSD (https:\/\/wpsd\.radio)/FreeDMR.Digital - The Next Generation/g' {} +

# Zusätzliche Ausgabe in grüner und blauer Farbe
echo -e "\e[92mFragen einfach ins Forum unter \e[0m\e[94m$UURL\e[0m"

# Wartezeit für visuelle Kontrolle
sleep 10

# Berechtigungen erneut setzen (falls notwendig)
sudo chmod 775 -R "$CHDIR" >> "$LOGFILE" 2>&1
sudo chown pi-star:pi-star -R "$CHDIR" >> "$LOGFILE" 2>&1

# Optionale Berechtigung für das gesamte Verzeichnis /usr/local/ setzen
sudo chmod 777 -R "$LLDIR" >> "$LOGFILE" 2>&1

# Ausführen des Scripts /home/pi-star/upwpsd mit Fehlerprotokollierung
#bash /home/pi-star/upwpsd >> "$LOGFILE" 2>&1

exit 0
